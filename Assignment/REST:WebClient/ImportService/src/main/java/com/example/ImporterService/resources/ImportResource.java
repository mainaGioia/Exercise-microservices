package com.example.ImporterService.resources;

import java.io.BufferedWriter;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.reactive.function.client.WebClient;

import com.example.ImporterService.models.Reservation;

import reactor.core.publisher.Mono;


/**
 * Service that imports reservations via GET and POST, 
 * checks if they are valid, stores them into a file (/Desktop/reservations.txt)
 * and calls the CompactionService via REST api - synchronously -
 * and via WebClient - asynchronously - to produce a reservations'summary
 * @author alessandra
 */
@RestController
public class ImportResource {
	
	//For synchronous communication between services
	//Injects the restTemplate instance created in ImportServiceApplication
	@Autowired
	private RestTemplate restTemplate;
	
	
	//For asynchronous communication between services
	//Injects the webclient.builder instance created in ImportServiceApplication
	@Autowired
	private WebClient.Builder webClientBuilder;
	
	
	/**
	 * Gets the reservations via POST request
	 * @param reservation
	 * @return
	 */
	@PostMapping("/reservations")
	public Mono<String> getReservations(@RequestBody Reservation reservation) {			      
		 return processReservation(reservation);	  
	}
	
	
	/**
	  * Gets the reservations via GET request
	  * (e.g. http://localhost:8081/reservations?reservationId=0001&guestName=John%20Smith&hotelName=Mondschein&city=Innsbruck)
	  * @param reservation
	  * @return
	  */
	 @RequestMapping("/reservations")
	 public Mono<String> getReservationsWithParams(Reservation reservation) {   
		 return processReservation(reservation);	  
	 }
	 
	
	 /**
	  * Processes a reservation in input, 
	  * Calling validate, store and then the rest api to update 
	  * the summary generated by CompactionService. 
	  * In case of failure in validating or storing, returns "invalid data"
	  * @param reservation
	  * @return 
	  */
	 private Mono<String> processReservation(Reservation reservation) {
		 return (validate(reservation) && store(reservation)) ?
                             AsyncUpdateSummaries() :
                             null;
	 }
	
	 
	/**
	 * Validates the data in input (in this case it just checks for the string not to be empty)
	 * @param data represents the strings in input
	 * @return true or false depending on the data validity
	 */
	private Boolean validate(Reservation reservation) {
		return !(reservation.getCity() == null ||
                 reservation.getCity().isEmpty()) 
	}
	
	
	/**
	 * Writes data into a text file 
	 * @param data represents strings in input
	 * @return true or false depending on the success of the operation
	 */
	private Boolean store(Reservation reservation) {
		try{
			writeToFile(reservation.toString());
		}
		catch(IOException ex) {
			System.err.println("Impossible to store the reservation: "+ex.getMessage());
			return false;
		}
		
		return true;
		
	}
	
	
	/**
	 *	Synchronous REST call to the CompactionService updating the summary
	 *  @return
	 */
	private String SyncUpdateSummaries() {
		return restTemplate.getForObject("http://localhost:8082/summaries", String.class);
	}
	
	
	/**
	 * Asynchronously retrieves the requested object from the CompactionService
	 * and returns a Mono object which will contain the summaries when they will be available, 
	 * without blocking the execution.
	 * If we would block the execution, we would have the String object in return
	 * and the method would perform basically in a synchronous way like SyncUpdateSummaries()
	 * @return
	 */
	private Mono<String> AsyncUpdateSummaries() {
		 return webClientBuilder.build()
				 .get()
				 .uri("http://localhost:8082/summaries")
				 .retrieve()
				 .bodyToMono(String.class);
				 //.block();
	}
	
	
	/**
	 * Writes data to a text file on the desktop 
	 * @param data
	 * @throws IOException
	 */
	public static void writeToFile(String data) throws IOException
	{	     
		//Gets the desktop path and appends the file name
		String desktopPath = System.getProperty ("user.home") + "/Desktop/";
		String path = desktopPath + "reservations.txt";
		File file = new File(path);

		//If the file does not exist, it creates it
		if (!file.exists()) {
		   file.createNewFile();
		}

		//Writes to the file appending a new line
	    BufferedWriter writer = new BufferedWriter(
	                                new FileWriter(file, true)); 
	    writer.write(data);
	    writer.newLine(); 
	    writer.close();
	}
	
	
}

